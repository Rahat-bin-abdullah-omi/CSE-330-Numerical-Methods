{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LAB08.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7T2WarTFb9ZQ"
      },
      "source": [
        "# CSE 330 Numerical Analysis Lab \n",
        "\n",
        "### Lab 7: Root Finding using Newton's Mehtod\n",
        "\n",
        "### Instructions\n",
        "---\n",
        "\n",
        "This week we will have two assignments.\n",
        "1. Finding root of a polynomial using Newton's method. \n",
        "2. Finding root of system of implicit functions using Newton's method.\n",
        "\n",
        "### Root Finding (Newton's Method):\n",
        "Newton's method for root finding is basically a special case of *Fixed-point* method which converges superlinearly. In this method we define $g(x)$ as this,\n",
        "\n",
        "$$g(x) = x - \\frac{f(x)}{f^{\\prime}(x)}$$\n",
        "\n",
        "so, if after $k$-th iteration we find $x_k$, then $x_{k+1}$ is, \n",
        "\n",
        "$$x_{k+1} = x_k - \\frac{f(x_k)}{f^{\\prime}(x_k)} $$\n",
        "\n",
        "Let's write a code for this."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Y4Y6Lz-adCT6",
        "outputId": "efdb84e9-379f-4aaa-9daf-a01fa381b990",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        }
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from numpy.polynomial import Polynomial\n",
        "\n",
        "# Define a polynomial named 'f'\n",
        "f = Polynomial([2.0, 1.0, -6.0, -2.0, 2.5, 1.0])\n",
        "\n",
        "# Define the first derivative of polynomial 'f' named 'f_prime'\n",
        "f_prime = f.deriv(1)\n",
        "\n",
        "# Draw the X-axis\n",
        "plt.axhline(y=0, color='k')\n",
        "\n",
        "# Generate 100 values of x.\n",
        "x = np.linspace(-2.5, 1.6, 100)\n",
        "\n",
        "# Calculate y-values of corresponding x-values of f(x).\n",
        "y = f(x)\n",
        "\n",
        "# Plot the graph of f(x) using x-values and y-values\n",
        "plt.plot(x, y)\n",
        "\n",
        "# Plot the roots of the graph\n",
        "plt.plot(f.roots(), f(f.roots()), 'ro')\n",
        "\n",
        "# Print the roots of the function f(x)\n",
        "print(f.roots())\n",
        "\n",
        "# Calcuate y-values for corresponding x-values of f'(x).\n",
        "y = f_prime(x)\n",
        "\n",
        "# Plot the graph of f'(x)\n",
        "plt.plot(x, y)\n",
        "\n",
        "# Plot the roots of f'(x). Notice that, where f'(x) is zero the slop of f(x) is zero.\n",
        "plt.plot(f_prime.roots(), f_prime(f_prime.roots()), 'bo')\n",
        "\n",
        "# Print the roots of f'(x).\n",
        "print(f_prime.roots())\n",
        "\n",
        "# Start with an initial value\n",
        "# Uncomment this line and set a value for xk\n",
        "# try experimenting with different values\n",
        "# xk = ??\n",
        "xk=-2.5\n",
        "\n",
        "# Create a list for storing values of x's after each iteration\n",
        "list_x = [xk, ]\n",
        "\n",
        "# Create a list for storing values of f(x)'s after each iteration\n",
        "list_f = [f(xk), ]\n",
        "\n",
        "while True:\n",
        "    #+--------------------+\n",
        "    #| Start of your code |\n",
        "    #+--------------------+\n",
        "\n",
        "    xk_noman=xk-(f(xk)/f_prime(xk))\n",
        "    # Calculate newer values of xk  \n",
        "    xk=xk_noman\n",
        "\n",
        "    # append xk into list_x\n",
        "    list_x.append(xk)\n",
        "\n",
        "    # append f(xk) into list_f\n",
        "    list_f.append(f(xk))\n",
        "\n",
        "    # Write the breaking condition\n",
        "\n",
        "    if (abs(f(xk))<0.0001):\n",
        "        \n",
        "        break\n",
        "\n",
        "\n",
        "    #+------------------+\n",
        "    #| End of your code |\n",
        "    #+------------------+\n",
        "    pass\n",
        "\n",
        "df = pd.DataFrame({\"x\": list_x, \"f(x)\": list_f})\n",
        "print(df)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-2.         -1.92076271 -0.5819979   0.67242436  1.33033625]\n",
            "[-1.9614858  -1.18624916  0.08054271  1.06719224]\n",
            "          x      f(x)\n",
            "0 -2.500000 -6.750000\n",
            "1 -2.292706 -2.000795\n",
            "2 -2.155772 -0.568027\n",
            "3 -2.072095 -0.151811\n",
            "4 -2.026240 -0.036208\n",
            "5 -2.005812 -0.006288\n",
            "6 -2.000412 -0.000414\n",
            "7 -2.000002 -0.000002\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "YwRUfVRz4OVI"
      },
      "source": [
        "### Solving System of equations\n",
        "\n",
        "We can use Newton's method to solve system of implicit functions. For example. Let's take assume $y=f_1(x)$ and $y=f_2(x)$ are two functions such that,\n",
        "\n",
        "\\begin{align}\n",
        "xy - y^3 - 1 &= 0\\\\\n",
        "x^2y + y -5 &= 0\n",
        "\\end{align}\n",
        "\n",
        "Let's take a look at their graphs."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qBlWrvb7XxWJ",
        "outputId": "9daf152f-86c7-40ee-d326-b95a7522b0d9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from numpy import arange\n",
        "from numpy import meshgrid\n",
        "\n",
        "# Define a small value\n",
        "delta = 0.01\n",
        "\n",
        "# Create a set of x-values in the specified range with delta difference\n",
        "# for example in this case the x values will be, -4.00, -3.99, -3.98, ... 4.99, 5.00 etc.\n",
        "xrange = arange(-4, 5, delta)\n",
        "yrange = arange(-3, 6, delta)\n",
        "\n",
        "# Create a meshgrid (what is a meshgrid? it is basically co-ordinate matrix. you don't need to worry about this too much for this assignment)\n",
        "# If you are interested take a look here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html\n",
        "X, Y = meshgrid(xrange,yrange)\n",
        "\n",
        "# Let's define two functions as F1 and F2\n",
        "F1 = X*Y - Y**3 - 1\n",
        "F2 = X**2*Y + Y - 5\n",
        "\n",
        "# Draw the plots for F1 (red) and F2 (blue).\n",
        "plt.contour(X, Y, (F1), [0], colors=['red'])\n",
        "plt.contour(X, Y, (F2), [0], colors=['blue'])\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAD4CAYAAADxeG0DAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3deXhV1dU/8O9KGBIgkAAJICGEMcwg\nxABOFHDAoVJ5tWKrxVpf2qp1qHWk/rAqrYrWarWDRWx9S521WLWCWgGVIYR5lkGmME8hgSSQZP3+\nWDk9CQQScs+9557k+3me/dzk3ptzVyB33X322XttUVUQEVFwxfgdABERhYaJnIgo4JjIiYgCjomc\niCjgmMiJiAKugR8v2rp1a01PT/fjpYmIAmvRokX7VDX5xPt9SeTp6enIycnx46WJiAJLRLZUdT+H\nVoiIAo6JnIgo4JjIiYgCjomciCjgmMiJiAKOiZyIKOCYyImIAo6JnIgo4JjIiYgCjomciCjgmMiJ\niAKOiZyIKOCYyImIAo6JnIgo4JjIiYgCjomciCjgmMiJiAKOiZyIKOCYyImIAs6TPTtFZDOAfACl\nAEpUNdOL4xIRUfW83Hx5uKru8/B4RERUA14mcqKIOnIEmDMH2LABiI0FevcGzj0XaNjQ78iIIsur\nRK4AZoqIAvizqr504hNEZDyA8QCQlpbm0ctSfXT4MPD448Af/wgUFFR+rE0b4L77gJ/9jAmd6g+v\nLnaer6oDAVwG4DYRufDEJ6jqS6qaqaqZycnJHr0s1TfZ2UDfvsDTTwNXXQV88gmwezeQmwu8+y7Q\nrx9wzz3A0KHA5s1+R0sUGZ4kclXNLb/dA+A9AFleHJeoog8+AIYNs2GUuXOBadOAiy4CUlKAs84C\nrr4amDkTeOcdYONGYPBgYNkyv6MmCr+QE7mINBWRBOdrAJcAWBnqcYkqmjEDGDMG6NPHeuVDhpz6\nuWPGAPPmAY0bAyNHAmvWRC5OIj940SNvA+BLEVkGIBvAh6r6sQfHJQIArFgBXHMN0KuXDaW0bl39\nz/ToAXz+OdCgAXDZZcCePeGPk8gvIV/sVNVNAPp7EAvRSQ4dAr7zHaB5c+Cjj4DExJr/bJcuNhxz\nwQXA2LE27NKA87SoDuLKTopaqsD48cDWrcDbb9s4+JnKzLTZLZ9/Dvz6197HSBQNmMgpak2bBrz1\nFvDYYzYLpbZuugm44Qbg0UeBhQs9C48oaoiqRvxFMzMzNScnJ+KvS8Gxa5eNiffsaYt+YmNDO96h\nQ3ahNDERWLwYaNTImziJIklEFlVVAoU9copKd99tKzdffjn0JA5YAv/zn4FVq4Cnngr9eETRhImc\nos5nnwGvvw489JDNPvHKFVfY7JdJk4BvvvHuuER+YyKnqFJSAtxxB9C5M3D//d4f/9lngZgYW/1J\nVFcwkVNU+fOfgdWrgWeeAeLivD9+aqr19N97D5g1y/vjE/mBFzspauTlAV27Wi2Vzz4DRMLzOoWF\nNmTTurXNYolhd4YCghc7Keo99RSwbx8weXL4kjgAxMfbOPnixcAbb4TvdYgihYmcosKuXTZ+PXYs\nMGhQ+F/ve98D+vcHfvlL4Nix8L8eUTgxkVNUmDTJEupjj0Xm9WJibKXnpk3A1KmReU2icGEiJ99t\n3Qq89BJw8802Rh4pl11mOwo9/jhQVBS51yXyGhM5+W7SJLt9+OHIvq6InQHk5toHCVFQMZGTrzZv\ntqGNW24BOnSI/OuPGGGbVTzxhM1mIQoiJnLy1W9+Y+PVDz7oXwyPPALs3An85S/+xUAUCs8SuYjE\nisgSEfnAq2NS3bZtG/DKK8CPfmQLdfzyrW8BF14IPPkkUFzsXxxEteVlj/xOANxUi2rsySet5vgD\nD/gdiY3P79hhHyxEQeNJIheRVABXAJjixfGo7tu1C5gyBRg3DkhL8zsa29tzyBAbKz9+3O9oiM6M\nVz3y3wG4D0DZqZ4gIuNFJEdEcvbu3evRy1JQPfOMJcxo6I0DNoNlwgRgyxbb0IIoSEJO5CJyJYA9\nqrrodM9T1ZdUNVNVM5OTk0N9WQqw/ftt+7WxYyM7b7w6V1wBDBhgvfLSUr+jIao5L3rk5wG4SkQ2\nA3gdwAgR+bsHx6U66ve/t00j/JypUhURi2ndOquOSBQUnlY/FJFvAfiFql55uuex+mH9VVBgY+IX\nXABMn+53NCcrLbUt5po2BRYtCm/xLqIzxeqHFBX+9Cfg4EGrCR6NYmNtQ4slS4AZM/yOhqhmWI+c\nIqa4GOjUyTZU/uwzv6M5tWPHgC5dLNY5c/yOhsjFHjn57m9/sxWU0TY2fqJGjYBf/AL44gvgq6/8\njoaoekzkFBElJbZxxDnn2JztaHfLLbaD0G9+43ckRNVjIqeIeOstYONG640H4QJi06bAnXcCH34I\nLFvmdzREp8dETmGnaj3bnj2B0aP9jqbmbrsNSEhgr5yiHxM5hd0HHwArVtgqziBtdJyUBPz0p3Y2\nsX6939EQnVqA3lYURKq2pVp6OnD99X5Hc+buvtsufj75pN+REJ0aEzmF1eefA/PnA/fdBzRs6Hc0\nZ65tWyuz++qrVnaXKBoxkVNYTZpkyfCHP/Q7ktq79147s5g82e9IiKrGRE5hM28e8J//WCKMi/M7\nmtrr2BG48UbbQWj3br+jIToZEzmFzWOPAa1aAT/+sd+RhO7BB23F5zPP+B0J0cmYyCksFi0C/v1v\n4Oc/tznZQdetm5Xd/cMfgH37/I6GqDImcgqLRx8FEhOB22/3OxLvTJgAHD0KPPus35EQVcZETp5b\nsgR4/32bute8ud/ReKdXL+Daa62e+oEDfkdD5GIiJ889+ijQogVwxx1+R+K9hx8G8vOB3/7W70iI\nXEzk5KklS4B//tN644mJfkfjvT59rFf+/PO2ZR1RNGAiJ09NnGgJ/K67/I4kfCZOtJ2Onn7a70iI\njBebL8eJSLaILBORVSLyKy8Co+DJzgb+9S+r5d2ihd/RhE/v3sB119lY+Z49fkdD5E2PvBjACFXt\nD2AAgFEiMsSD41LAPPyw1fCui2PjJ3rkEaCwEHjiCb8jIfIgkaspKP+2YXmL/P5x5KvZs4GZM63C\nYUKC39GEX0YGMG6czStnDRbymydj5CISKyJLAewB8ImqLqjiOeNFJEdEcvbu3evFy1KUULWVj+3b\nA7fe6nc0kTNxov3ujz7qdyRU33mSyFW1VFUHAEgFkCUifap4zkuqmqmqmcnJyV68LEWJ99+3uioT\nJwLx8X5HEzkdOwI/+QnwyivAunV+R0P1maezVlT1EIDPAYzy8rgUvUpKrDfevXuwKxzW1oQJ9uEV\n7RtKU93mxayVZBFJLP86HsDFANaGelwKhldeAdasse3QGjTwO5rIS0mxWuvvvQfMnet3NFRfiWpo\n1yVFpB+AvwGIhX0wvKmqpx01zMzM1JycnJBel/xXUGDFpDp3Br78MhibKofDkSP275CeDnz1Vf39\nd6DwE5FFqpp54v0h96FUdTmAs0M9DgXPU08Bu3YB775bv5NX06ZWsveWW2x/z+9+1++IqL7hyk6q\nlW3bbGXjddcBQ4f6HY3/broJ6N/fhlmKivyOhuobJnKqlfvvt6l33JTYxMZaedstW7j5BEUeEzmd\nsS++AF57zbZw69jR72iix/DhwJgxwK9/DWzf7nc0VJ8wkdMZKSmxzSI6dLBeOVX29NNAWZnVmyGK\nFCZyOiN/+AOwfLnV464LW7h5rVMnK1PwxhvAZ5/5HQ3VFyFPP6wNTj8Mph07gB497OLmxx/X75kq\np1NUZHXLY2PtQ69xY78jorriVNMP2SOnGrvrLttJ/sUXmcRPJy7O/o2+/prVESkymMipRj74wOZI\n//KXQNeufkcT/S69FBg71i58ruU6ZwozJnKq1uHDwE9/ahsq3Hef39EEx+9+Z9cRbrnFLoAShQsT\nOVXr3nttfPzll4FGjfyOJjjatLG55V99Bbzwgt/RUF3GRE6nNXMm8NJLwM9/Dgwe7Hc0wfODHwCX\nXWbVETds8DsaqquYyOmUDh0CfvQjm6nCzRNqRwT4y1/sTGbcOKC01O+IqC5iIqdTuvVWYOdO4NVX\n69eGEV5r396GVubOZUkDCg8mcqrStGm2DH/iROCcc/yOJvi+9z0rMDZxIrBwod/RUF1TD7cCoOps\n2GCzVM4/nzvfeEUE+OMfbUu8sWOBJUuA5s39joqikiqwZw+werXt2uLcnqawUciJXEQ6AHgVQBsA\nCuAlVX0u1OOSP4qLrefYoIH1yuvjrj/hkpQE/OMfwLBhwPjxdsbDhVX1mJOwV62ytnq1e7t/v/u8\nhASgZ0+gbdtTHsqLt2kJgHtUdbGIJABYJCKfqOpqD45NEXb33cDixcD06UBamt/R1D3nnWebUDz0\nEHDBBcBtt/kdEUXEgQPAypXWVq1ybysm7KQkoFcvK6HZu7cl71697CKL84n/m99UeXgvdgjaCWBn\n+df5IrIGQHsATOQB8+qrdvp/773AVVf5HU3ddf/9tjXe3XcDAwdyY446pbDQetQrVlhbudJud+50\nn9O8uSVqJ2E7rW3bWp+ieVo0S0TSAcwB0EdVD5/w2HgA4wEgLS1t0JYtWzx7XQrdokU2Jj5kCPDJ\nJxxSCbeDB4HMTCuwlZMDtGvnd0R0RlSBzZutKlrFtmGDu4w3Ls561X37WhU1p6Wm1j5hn6JolmeJ\nXESaAZgNYJKqvnu657L6YXTZtctmpsTE2IyKlBS/I6ofli8Hzj3X3tuzZtn7nqLQ0aPWs162zG3L\nl1vtCkeXLkC/fpa0nda1q5XA9FDYNl8uP3hDAO8AmFZdEqfoUlgIjB5tQ3hffcUkHkn9+tlw1v/8\nD3DzzXZxmRc/fbZvn00pWrIEWLrU2rp1bi87IcH+4264wW7797dP4mbNfA3bi1krAuBlAGtU9beh\nh0SRUloK3Hij9cLffRcYMMDviOofZ2u4hx6yTt1jj/kdUT2hCuTm2pV9py1ZUnmPvrQ0e1Nce63d\n9u8PpKfbqWuU8aJHfh6AGwGsEJGl5fc9pKofeXBsChNVq5/yzju22893vuN3RPXXAw8AGzcCjz9u\nW+iNH+93RHWMk7RzcqwtXmwXhfbsscdFgIwM4MILgbPPdlvLlv7GfQa8mLXyJQCeEAbMr38NPP+8\nzZy4+26/o6nfnMVCO3faQqxWrWy4hWpp7147zXRaTg6we7c9FhtrU/ouvxwYNMimDfXvH/h9Czk3\noR564QXbIOKGG2yzYPJfw4bAm28CF18MXH898K9/2eYUVI3CQuthL1gAZGfb7ebN9piIVXy79FKb\nIpSZaUm7SRNfQw4HJvJ6ZsoU4Gc/swucU6dG5XBfvdW0KfDhh8CIETbU9dFHwPDhfkcVRVSBb76x\nOgfz5gHz59sMkpISezwtDcjKsmpvWVnW205I8DfmCGEir0emTAH+93+tPvYbb1gvkKJLUpLVgB8+\nHLjiCttib8QIv6PySXGxjWXPnWtTqubNc4dImjWzObP33muF8gcPPu0S9rqOibyeeOEF64lfdpnN\nUOHO7tErORn4z3+AkSMtmb/7rv2/1Xl5eZa0v/jClr5mZ1syB2xKzyWX2MT7oUNtyp/Hc7SDjIm8\njlMFJk0CHn7YhlPeeINJPAhSUoDPP7fcNXo08H//Z8XM6pQDByxpz5oFzJljc7bLymxZ8cCBVojm\nvPOstWnjd7RRjYm8DistBe68E3jxRZsv/vLLHE4JktatLZl/+9t2AXTPHjurCqz8fEvYn31mv9iy\nZdbTiIuz2hC//KVNARwyJPCzSCKNibyOKigAvv994P33gV/8wnam4YXN4GnRApgxwzamuOMOu9Y3\neXJARhWOH7fhkZkzgU8/tRklpaV2Sjh0KPDII3YxICuLp4khYiKvg7Zts+qFy5cDv/89cPvtfkdE\noYiPB95+2xZwPfsssH69LeePyo0ptm4FPv4Y+Pe/baD/8GHrQWRmWtnHkSNtnJuFZTzFRF7HzJ5t\nK4qLi23GQ724SFYPxMYCzz1nCxDvuMNGH957z773VUmJTQP84ANrq1bZ/WlpNqh/6aU27SYpyd84\n6zgm8jpC1Rb3PPigFV375z9tLQTVLbfeapVRv/tdm303dSpwzTURDuLoURsu+ec/LXnv328XKC+8\nEPjhD23VZI8erAAWQUzkdcDevfb++fBDW9o9dWqUnnaTJ4YPt8WM115r7dZb7UM8Pj6ML3rkiP2B\nvfWWrVQ6ehRITLT5kaNH2/SaFi3CGACdDhN5wM2YAdx0k83kev55Gw9nR6ju69DBJoA8+KAVPZs9\n28bN+/f38EWOH7ee99//blfNjx61aYDjxlnZxmHDOA0qSnAeQ0Dl5wM/+QkwapQVacvOtqlpTOL1\nR6NGwDPP2HXF/fttqGXSJMu/IVmxwiqptW8PXHmlbRl14402ZTA3F/jDH4CLLmISjyJM5AH04Ye2\nxd9f/mJTCxct8rgnRoEyapTl3quvtqnYWVn2N3FGiopsl4uhQ23DhBdftDHv998HduwA/vQn4Fvf\nCsi8x/qHiTxAtm2zC1tXXmm1gL780uYUcyYXtW5tq3bfece27svKstkteXnV/ODevcDEiTbLZNw4\n20z0t7+15P3227YaqVGjiPwOVHueJHIRmSoie0RkpRfHo8oKC23TgR49rDf++OO2mQl3X6cTjRkD\nrFljw24vvAB0724rektLT3ji7t02Mb1jR+DRR63o1Cef2A/ffbd9MlBgeNUj/yuAUR4di8qVltrZ\nbkaG1UoZNcreZxMmsJNEp5aYaCMjCxfaVNRbbrE9FGbOBPRooSXuLl1sYvq11wKrV1sB9Isu4kWW\ngPIkkavqHAAHvDgW2Zzw996zbQLHjbMCSrNm2Wlzerrf0VFQDBpkw2+vv25DLJdeCoxstRRzJ37s\n9gr+9jebmE6BFrExchEZLyI5IpKzd+/eSL1soJSVWbIeONBOkY8dszdhdrbN9CI6UyLAddeWYe3Y\nR/Ac7sCq491wHubiksNvY86u7lD1O0LyQsQSuaq+pKqZqpqZnJwcqZcNhKIiG8fs3dsuZh45Avz1\nr7ba+brrWOyKQlBaCowbh8ZP/Ap33HwEm3Y2wVNPWeHBYcOA88+3BZonjaFToDBF+GjHDpsw0LGj\njWPGxQGvvWZnvOPG2apnopA88ogt6Hn8cWDKFDRNboJ777Uqis8/b3+DV19t12Gee64Gs1woKjGR\nR1hZmU0OuOYam/H12GO2kOPTT23Z9dixnKpLHtm6FXjiCesVTJhQ6UJmkya2gGz9epu2mJwM3HWX\nrQEaP942nuewS3B4Nf3wNQDzAGSIyHYR+ZEXx61LNmyw3nenTlaWYtYse+OsX291h0aO5IQB8tjH\nH1t1wgkTTvmUBg2sANe8eZa8r7vOOvDnnGOLzJ591ualU3TzatbK9araTlUbqmqqqr7sxXGDbscO\nO10dMgTo1s163xkZNnySm2uFjrp08TtKqrOcge8anuINGmTXanbutFX4cXE21bx9e5vx8te/AocO\nhS9cqj1RH86fMjMzNScnJ+KvGwmbNtnFo3fftY2/AevZfO971lJT/Y2P6pFvvrEVQVdfbb2HWozZ\nrVljPfTXXrPDNWxo083HjLFFn9xKM7JEZJGqZp50PxN5aI4ft9PSjz6qXFe/Xz8rKfvd77IuOPlo\n8mTgvvusrsOUKbXOvKq2wOjNN62T8s03NhQ4eLBVsr38clv3wBlW4cVE7hFVYO1a2z/2009tN6v8\nfBtrvOAC66WMHg107ux3pETlXngBuOced6zktttCWoKvatsITp9uC0Kdt3JKCnDxxdZjHzHCLuaT\nt5jIa6m01HrZX3xhbfZs9+JPerpduLz0Uvvj5WYOFLXWrQMeeMDG/Ro3trGR73/f/nBD3Ph4926r\niz9jhnVu9uyx+zt3trnqF15o89W7dOEF/VAxkdfQnj12CrlggW1FuGCB7R8L2EWfYcNsh5YRI9jr\npgBavdquZP7jH1bpMCHB7Y0MHx5ytlUFVq60M9VZs2zziwPlxTtSUqzQ25AhVp1x0CBuKnSmmMhP\noGozR5YutUqCS5ZYDeetW+3xmBigb1/7wzv3XOtRpKezR0F1xLFjtqBh+nS7wJOba/e3a2d/8EOG\nWKYdODCkbFtWZhdMv/wSmDvXrietX+8+npFhLzFwoI2x9+9vc9qpavU6ke/bZx2RVausrVxpY3wH\nD7rP6dbN/m4HDbLewsCBQLNmEQuRyD/OhZ9Zs9yMu3mz+3h6uvVq+vSxAls9elgGruVY4oEDdtab\nnW2dp8WLrda+o107e7m+fa1sRa9e9rIcuqwHifzIEWDjRlt4s3498PXXNiy4dq1tg+VISLC/x759\nbWZJ//7WEhI8DYco2PbutSy7ZIkVZlmxwt5UJSXuc1JSrAfUubO19HSrN9Gxo82zPYNay/v22dnx\nsmXWyVqxwnryRUXuc846yz5Dune31q2blent1CnkYf7ACHwiLy62T+0tW6xt3mxToDZtsnbi6rM2\nbazT0KOHtZ497ZO9QwcOjxDVyvHj1ktat86S+vr11nPauNGGZirmEhF7E6am2sWls86y27Ztrcvd\ntq09npJyyr0/S0vtvb16tSX1tWutrVtXeWGSiL2vO3e2pN6pU+XPlPbt607doqhN5Kp2MXHnTlsJ\nmZvr3m7fbsl72za7Ml5RTIz9jXTqZP+BXbpY69bNGk/DiCLo2DG7wLR5s91u3Wpv4O3b7c2cm1t5\nLLOipCRL6snJNi0yORlo1cq+btXKWsuW1pKSgKQk7DvcCOvX22fJxo1uh+6bbyyXVBQTY58jHTpY\nznA+W5zWrp21pk3D/q8UsqhK5ElJmdqzZw5277Z/9MLCk5/TvLn7j56WZv8JaWnup2yHDtzEmyhQ\niors1HnnTrvdvdvanj02lOPc7ttn46Gnq63btKlthVSxtWgBtGiBwiatsFU7YMuxdthyNBlbC5Kw\nLa8Fth1ogm1747B9V0MUFp18Wp6QUPlkwWkpKdaSk93PmsREfxY/RVUij4/P1HPPzUGbNu6nYbt2\n9qnpnIHxQiNRPaZqNXX377ero87twYOV26FDbsvLc1vFsfwTDw0gDy2Qi1TsiOuMHY3TsbNBB+yU\n9tipbbG7rDV2HW+FPccScehY1d302JgytEw4jtYtjqNVYilaJamdOLQStEyORVJyAySlNLSvkyp/\n1oTSAT1VIvdl5Kh3b1sZSURUJRE3+51pZTlV6/3n5dm4bX5+pVvJz0diQQES8/PRu6AAKCgACpYA\nBV/YrImCArs9cgTFBcextyAee4oSsBfJ/237ylpjX15r7M9rhf1bW2ETWmEhWuEAWqII8acNr4kU\nIrFBPlo0PGqtURGaNy5G87hiNI87jubxx5HQpBTNm5QgoZkioWkZEpopUjKSTnnMOnIJgIionAgQ\nH2+tbduQDtUYQCqAVFUbAz561JK887XTCr8Bjq4CCgtRmHcMBw8oDhwUHMoTHDwci0MFsTh0pCEO\nHmmEvMLGOFQUh7ziOOQdi8fBI/HYnJeIw6VNkV/WFAVa9XDEsBZLTxknEzkRUXVEbDeOJk2qrVMT\nX97OquVLlZbaSUF+PpB/sAT5B44j/8BxNG3SCUNHVf0zniRyERkF4DkAsQCmqOoTXhyXiKi+iY39\n73VbILUBLE2ffrgm5OuuIhIL4EUAlwHoBeB6EekV6nGJiKhmvJhAkwVgg6puUtVjAF4HMNqD4xIR\n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\nrkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "WCXYG6sOnYRF"
      },
      "source": [
        "Now how do we solve these pair of equations? We will use matrix representations for these equations. Let, $\\boldsymbol{s} = (x, y)^T$ and $\\boldsymbol{f} = \\left[f_1(\\boldsymbol{s}), f_2(\\boldsymbol{s}) \\right] ^T$. Then, we can write,\n",
        "\n",
        "\\begin{align}\n",
        "0 \\approx f_1(\\boldsymbol{s}_{k+1}) \\approx f_1(\\boldsymbol{s}_k) + \\frac{\\partial f_1}{\\partial x} \\biggr\\rvert_{\\boldsymbol{s}_k} (x_{k+1} - x_k) + \\frac{\\partial f_1}{\\partial y} \\biggr\\rvert_{\\boldsymbol{s}_k} (y_{k+1} - y_k)\\\\\n",
        "0 \\approx f_2(\\boldsymbol{s}_{k+1}) \\approx f_2(\\boldsymbol{s}_k) + \\frac{\\partial f_2}{\\partial x} \\biggr\\rvert_{\\boldsymbol{s}_k} (x_{k+1} - x_k) + \\frac{\\partial f_2}{\\partial y} \\biggr\\rvert_{\\boldsymbol{s}_k} (y_{k+1} - y_k)\n",
        "\\end{align}\n",
        "\n",
        "We can rewrite this in matrix form, like this,\n",
        "\\begin{align}\n",
        "\\bigg({\\begin{array}{c} 0 \\\\0 \\end{array} }\\bigg) = \\bigg({\\begin{array}{c} f_1(\\boldsymbol{s}_k) \\\\f_2(\\boldsymbol{s}_k) \\end{array} }\\bigg) + \\Bigg({\\begin{array}{cc} \\frac{\\partial f_1}{\\partial x}\\boldsymbol{s}_k & \\frac{\\partial f_1}{\\partial y}\\boldsymbol{s}_k \\\\\\frac{\\partial f_2}{\\partial x}\\boldsymbol{s}_k & \\frac{\\partial f_2}{\\partial y}\\boldsymbol{s}_k \\end{array} }\\Bigg)\\bigg({\\begin{array}{c} x_{k+1} - x_k \\\\y_{k+1} - y_k \\end{array} }\\bigg)\n",
        "\\end{align}\n",
        "\n",
        "The matrix part here is called $\\boldsymbol{J}\\text{acobian Matrix}, J(\\boldsymbol{s}_k)$. From there we can derive,\n",
        "\n",
        "\\begin{equation}\n",
        "\\boldsymbol{s}_{k+1} = \\boldsymbol{s}_k - \\boldsymbol{J}^{-1}(\\boldsymbol{s}_k)\\boldsymbol{f}(\\boldsymbol{s}_k)\n",
        "\\end{equation} \n",
        "\n",
        "*Note:* Please refer to the class note for detailed proof.\n",
        "\n",
        "For this purpose we will need to use `sympy` library. Let's take a look into it.\n",
        "\n",
        "### `sympy` Library\n",
        "Using `sympy` we can express mathematical expressions nicely.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "IFGvLjtio_WB",
        "outputId": "0ecdd8ec-8060-4316-a4e8-59ac6b25432e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        }
      },
      "source": [
        "# These lines are included for beautification\n",
        "from google.colab.output._publish import javascript\n",
        "url = \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js\"\n",
        "javascript(url=url)\n",
        "# Don't worry about these lines\n",
        "\n",
        "# import sympy\n",
        "import sympy as sp\n",
        "import math\n",
        "\n",
        "# Defing x and y as mathematical symbols\n",
        "vars = sp.symbols('x y')\n",
        "x, y = vars\n",
        "\n",
        "# Create an expression\n",
        "expr1 = sp.sqrt(5 * x**3 + 1/x)\n",
        "print(\"Expression 1:\")\n",
        "display(expr1)\n",
        "print()\n",
        "# We can substitute values like this\n",
        "print(expr1.subs({x: 2*x}))\n",
        "\n",
        "# Create another expression \n",
        "expr2 = x**y - sp.exp(x**2)\n",
        "print(\"\\nExpression 2:\")\n",
        "display(expr2)\n",
        "print()\n",
        "print(expr2.subs({x: 0.1, y:0.2}))\n",
        "\n",
        "# We can also differentiate\n",
        "expr3 = 4*x**3 - 3*x**2 + sp.sqrt(1+x**2)\n",
        "print(\"\\nExpression 3:\")\n",
        "display(expr3)\n",
        "print(\"\\nd/d(x) of expr3:\") \n",
        "display(sp.diff(expr3))\n",
        "print()\n",
        "\n",
        "# Similarly we can also calculate partial derivative\n",
        "expr4 = 4*x**3*y**2 - 3*x**2*y**3 + (sp.sqrt(1+x**2+y**2))\n",
        "print(\"\\nExpression 4:\")\n",
        "display(expr4)\n",
        "print(\"\\nd/d(x) of expr4:\") \n",
        "display(sp.diff(expr4, x))\n",
        "print()\n",
        "print(\"\\nd/d(y) of expr4:\") \n",
        "display(sp.diff(expr4, y))\n",
        "print()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js'></script>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Expression 1:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sqrt(5*x**3 + 1/x)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "sqrt(40*x**3 + 1/(2*x))\n",
            "\n",
            "Expression 2:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "x**y - exp(x**2)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "-0.379092822603975\n",
            "\n",
            "Expression 3:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "4*x**3 - 3*x**2 + sqrt(x**2 + 1)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "d/d(x) of expr3:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "12*x**2 - 6*x + x/sqrt(x**2 + 1)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Expression 4:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "4*x**3*y**2 - 3*x**2*y**3 + sqrt(x**2 + y**2 + 1)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "d/d(x) of expr4:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "12*x**2*y**2 - 6*x*y**3 + x/sqrt(x**2 + y**2 + 1)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "d/d(y) of expr4:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "8*x**3*y - 9*x**2*y**2 + y/sqrt(x**2 + y**2 + 1)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "SzYBOy6BARuz"
      },
      "source": [
        "Now let's try this assignment."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "mPtSnO-MYMmE",
        "outputId": "efddff84-985e-4343-8570-924313f7e9dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        }
      },
      "source": [
        "import numpy as np\n",
        "import sympy as sp\n",
        "\n",
        "# Define x and y as mathematical symbols\n",
        "vars = sp.symbols('x y')\n",
        "x, y = vars\n",
        "\n",
        "# Define the functions \n",
        "f = sp.Matrix([x*y - y**3 - 1, x**2 * y + y - 5])\n",
        "\n",
        "# Initialise Jacobian matrix\n",
        "J = sp.zeros(len(f),len(vars))\n",
        "\n",
        "# Fill Jacobian matrix with entries\n",
        "for i, fi in enumerate(f):\n",
        "    for j, s in enumerate(vars):\n",
        "        J[i,j] = sp.diff(fi, s)\n",
        "\n",
        "print(J)\n",
        "# Find the inverse of Jacobian Matrix\n",
        "J_inv = sp.Matrix.inv(J)\n",
        "print(J_inv)\n",
        "\n",
        "# Initialize solution s with starting value x_0 = 2.0 and y_0 = 3.0\n",
        "s = sp.Matrix([\n",
        "    2.0,\n",
        "    3.0\n",
        "])\n",
        "\n",
        "# Make a dictionary using the initial values\n",
        "dictionary = {\n",
        "    x: s[0],\n",
        "    y: s[1]\n",
        "}\n",
        "\n",
        "# calculate f(s_k) using initial values\n",
        "f_sk = f.subs(dictionary)\n",
        "\n",
        "# Start iterating using while loop\n",
        "i = 0\n",
        "while i<10:\n",
        "    # Calculate value of inverse jacobian, j^-1(sk), j_val\n",
        "    # j_val = ??\n",
        "\n",
        "    j_val= J_inv.subs(dictionary)\n",
        "    # Calculate the new value of s using iterative formula\n",
        "    # s = ??\n",
        "    s=s-((j_val)*(f_sk))\n",
        "\n",
        "    # Update the dictionary using newer values\n",
        "    # dictionary = ??\n",
        "\n",
        "\n",
        "    dictionary ={\n",
        "        x:s[0],\n",
        "        y: s[1]\n",
        "        }\n",
        "\n",
        "\n",
        "\n",
        "    # Update f(s_k) using newer values of s_k\n",
        "    # f_sk = ??\n",
        "\n",
        "\n",
        "    f_sk=f.subs(dictionary)\n",
        "\n",
        "\n",
        "\n",
        "    print(s)\n",
        "    i += 1\n",
        "\n",
        "print()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Matrix([[y, x - 3*y**2], [2*x*y, x**2 + 1]])\n",
            "Matrix([[(x**2 + 1)/(-2*x*y*(x - 3*y**2) + y*(x**2 + 1)), -(x - 3*y**2)/(-2*x*y*(x - 3*y**2) + y*(x**2 + 1))], [-2*x*y/(-2*x*y*(x - 3*y**2) + y*(x**2 + 1)), y/(-2*x*y*(x - 3*y**2) + y*(x**2 + 1))]])\n",
            "Matrix([[1.55555555555556], [2.06666666666667]])\n",
            "Matrix([[1.54720541388114], [1.47779333496041]])\n",
            "Matrix([[1.78053502926115], [1.15886481100565]])\n",
            "Matrix([[1.95284300049945], [1.02844268807581]])\n",
            "Matrix([[1.99776297310451], [1.00124040908490]])\n",
            "Matrix([[1.99999523621189], [1.00000259961750]])\n",
            "Matrix([[1.99999999997887], [1.00000000001153]])\n",
            "Matrix([[2.00000000000000], [1.00000000000000]])\n",
            "Matrix([[2.00000000000000], [1.00000000000000]])\n",
            "Matrix([[2.00000000000000], [1.00000000000000]])\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "8FQY5tSeWX8y",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cv2-MdQigW8L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}